[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Bristol Vaccine Centre Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/consistency.html","id":"toy-example","dir":"Articles","previous_headings":"","what":"Toy example","title":"Consistency checking with pkgutils","text":"Suppose creating function mechanics Inferring acceleration, including coercion f: Inferring acceleration, recycling mass parameter: default value mass given function. Inferring therefore needs user provide explicit NULL value otherwise default prevents inference constraints fail follows: Combining inferring values specified default values leads slightly counter-intuitive behaviour pattern recommended. better specify default value constraints mass. Inferring force: insufficient information provided calculate remaining variables error thrown: default value given used inference specified recycled needed, still think potential confusing:","code":"newton2 = function(f, m = 5, a) {   # ensure parameters provided are the same length   pkgutils::recycle(f,m,a)   # ensure parameters f,m and a are numeric and coerce them if not.   pkgutils::check_numeric(f,m,a)   # fill in missing variables using the relationships given.   pkgutils::resolve_missing(     f = m*a,     a = f/m,     m = f/a   )   # do something useful here...   return(list(f=f,m=m,a=a)) } newton2(f=\"10\",m=2) #> $f #> [1] 10 #>  #> $m #> [1] 2 #>  #> $a #> [1] 5 newton2(f=1:10, m=2) #> $f #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $m #>  [1] 2 2 2 2 2 2 2 2 2 2 #>  #> $a #>  [1] 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 try(newton2(f=1:10, a=0.5)) #> Error : 1) constraint 'f = m * a' is not met. #> 2) constraint 'a = f/m' is not met. #> 3) constraint 'm = f/a' is not met. newton2(f=1:10, m=NULL, a=0.5) #> $f #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $m #>  [1]  2  4  6  8 10 12 14 16 18 20 #>  #> $a #>  [1] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 newton2(m=2,a=1:10) #> $f #>  [1]  2  4  6  8 10 12 14 16 18 20 #>  #> $m #>  [1] 2 2 2 2 2 2 2 2 2 2 #>  #> $a #>  [1]  1  2  3  4  5  6  7  8  9 10 try(newton2(m=2)) #> Error : unable to infer missing variable(s): `f`, `a` using: #> `f = m * a` #> `a = f/m` #> `m = f/a` #> given known variable(s): `m` in `newton2(m = 2)` newton2(f=1:10) #> $f #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $m #>  [1] 5 5 5 5 5 5 5 5 5 5 #>  #> $a #>  [1] 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rob Challen. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Challen R (2024). pkgutils: Functions building functions. R package version 0.1.0, https://github.com/bristol-vaccine-centre/pkgutils, https://bristol-vaccine-centre.github.io/pkgutils/index.html.","code":"@Manual{,   title = {pkgutils: Functions for building functions},   author = {Rob Challen},   year = {2024},   note = {R package version 0.1.0, https://github.com/bristol-vaccine-centre/pkgutils},   url = {https://bristol-vaccine-centre.github.io/pkgutils/index.html}, }"},{"path":"/index.html","id":"pkgutils","dir":"","previous_headings":"","what":"Functions for building functions","title":"Functions for building functions","text":"pkgutils set functions making writing R functions easier. intention included dependency R packages therefore designed package author end user. functions provided fall 2 categories, focus validating parameters completeness consistency length, focus working dataframe inputs multiple layers grouping, function may need configured operate different columns, different column groups. maturing package behaviour may evolve time.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions for building functions","text":"pkgutils part Bristol Vaccine Centre r-universe. Installation follows: can install development version pkgutils GitHub :","code":"options(repos = c(   \"bristol-vaccine-centre\" = 'https://bristol-vaccine-centre.r-universe.dev/',   CRAN = 'https://cloud.r-project.org'))  # Download and install growthrates in R install.packages(\"pkgutils\") # install.packages(\"devtools\") devtools::install_github(\"bristol-vaccine-centre/pkgutils\")"},{"path":"/reference/as.var_grp_df.html","id":null,"dir":"Reference","previous_headings":"","what":"The var_grp_df dataframe subtype — as.var_grp_df","title":"The var_grp_df dataframe subtype — as.var_grp_df","text":"like grouped data frame 3 grouping dimensions. labelled z, y, x relate z (.e. group, cohort), y (.e. subgroup, response) x (.e. data). configurations, z x non-empty. purpose make group / subgroup data operations consistent. example running multiple models across different bootstraps example.","code":""},{"path":"/reference/as.var_grp_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The var_grp_df dataframe subtype — as.var_grp_df","text":"","code":"as.var_grp_df(df, z, y, x)"},{"path":"/reference/as.var_grp_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The var_grp_df dataframe subtype — as.var_grp_df","text":"df dataframe z z columns (e.g. cohort) list columns y y columns (e.g. response) list columns x x columns (e.g. predictor) list columns","code":""},{"path":"/reference/as.var_grp_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The var_grp_df dataframe subtype — as.var_grp_df","text":"","code":"tmp = as.var_grp_df(iris,    c(\"Species\"),    c(\"Sepal.Width\", \"Sepal.Length\"),    c(\"Petal.Width\", \"Petal.Length\")) # print.var_grp_df(tmp) glimpse.var_grp_df(tmp) #> 3 group(s): Species. #> (subgroup) Sepal.Width + Sepal.Length ~ Petal.Width + Petal.Length (data)  #> Rows: 150 #> Columns: 5 #> $ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.… #> $ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.… #> $ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.… #> $ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.… #> $ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…  tmp2 = as.var_grp_df(iris,    c(Species),    tidyselect::starts_with(\"Sepal\"),    tidyselect::starts_with(\"Petal\")) #> Error in value[[3L]](cond): tidyselect syntax is not supported in the function call: `as.var_grp_df(...)` glimpse.var_grp_df(tmp2) #> Error in eval(expr, envir, enclos): object 'tmp2' not found"},{"path":"/reference/check_consistent.html","id":null,"dir":"Reference","previous_headings":"","what":"Check function parameters are conform to a set of rules — check_consistent","title":"Check function parameters are conform to a set of rules — check_consistent","text":"parameters function given combination interdependency (e.g. different parameterisations probability distribution) constraint (like x>0) function can simulataneously check interrelations satisfied report conformant features parameters.","code":""},{"path":"/reference/check_consistent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check function parameters are conform to a set of rules — check_consistent","text":"","code":"check_consistent(..., .env = rlang::caller_env())"},{"path":"/reference/check_consistent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check function parameters are conform to a set of rules — check_consistent","text":"... set rules check either x=y+z, x>y. Single = assignment checked equality using identical otherwise expressions evaluated checked true. consistency resolve_missing uses assignment, ignores logical expressions. .env environment check ","code":""},{"path":"/reference/check_consistent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check function parameters are conform to a set of rules — check_consistent","text":"nothing, throws informative error checks fail.","code":""},{"path":"/reference/check_consistent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check function parameters are conform to a set of rules — check_consistent","text":"","code":"testfn = function(pos, neg, n) {   check_consistent(pos=n-neg, neg=n-pos, n=pos+neg, n>pos, n>neg) }  testfn(pos = 1:4, neg=4:1, n=rep(5,4)) try(testfn(pos = 1:4, neg=5:2, n=rep(5,4))) #> Error : 1) constraint 'pos = n - neg' is not met. #> 2) constraint 'neg = n - pos' is not met. #> 3) constraint 'n = pos + neg' is not met. #> 4) constraint 'n > neg' is not met"},{"path":"/reference/check_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks a set of variables can be coerced to a date and coerces them — check_date","title":"Checks a set of variables can be coerced to a date and coerces them — check_date","text":"Checks set variables can coerced date coerces ","code":""},{"path":"/reference/check_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks a set of variables can be coerced to a date and coerces them — check_date","text":"","code":"check_date(   ...,   .message = \"`{param}` is not a date: ({err}).\",   .env = rlang::caller_env() )"},{"path":"/reference/check_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks a set of variables can be coerced to a date and coerces them — check_date","text":"... Arguments passed base::.Date x object converted. .message glue spec containing {param} name parameter {err} cause fo error .env environment check (defaults calling environment)","code":""},{"path":"/reference/check_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks a set of variables can be coerced to a date and coerces them — check_date","text":"nothing. called side effects. throws error variables can coerced.","code":""},{"path":"/reference/check_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks a set of variables can be coerced to a date and coerces them — check_date","text":"","code":"a = c(1:4L) b = c(\"1\",NA,\"3.3\") f = NULL g = NA check_numeric(a,b,f,g)  c = c(\"dfsfs\") try(check_numeric(c,d, mean)) #> Warning: 1) 'd' is not defined in this context #> 2) 'mean' is not defined in this context #> Error in .check_framework(..., predicate = predicate, convert = convert,  :  #>   1) `c` is non-numeric (non numeric format)."},{"path":"/reference/check_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks a set of variables can be coerced to integer and coerces them — check_integer","title":"Checks a set of variables can be coerced to integer and coerces them — check_integer","text":"N.B. works specific environment (prevent weird side effects)","code":""},{"path":"/reference/check_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks a set of variables can be coerced to integer and coerces them — check_integer","text":"","code":"check_integer(   ...,   .message = \"`{param}` is not an integer ({err}).\",   .env = rlang::caller_env() )"},{"path":"/reference/check_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks a set of variables can be coerced to integer and coerces them — check_integer","text":"... list symbols .message glue spec containing {param} name parameter {err} cause fo error .env environment check (defaults calling environment)","code":""},{"path":"/reference/check_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks a set of variables can be coerced to integer and coerces them — check_integer","text":"nothing. called side effects. throws error variables can coerced.","code":""},{"path":"/reference/check_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks a set of variables can be coerced to integer and coerces them — check_integer","text":"","code":"a = c(1:4) b = c(\"1\",NA,\"3\") f = NULL g = NA check_integer(a,b,f,g)  c = c(\"dfsfs\") e = c(1.0,2.3) try(check_integer(c,d,e, mean)) #> Warning: 1) 'd' is not defined in this context #> 2) 'mean' is not defined in this context #> Error in .check_framework(..., predicate = predicate, convert = convert,  :  #>   1) `c` is not an integer (non numeric format). #> 2) `e` is not an integer (rounding detected)."},{"path":"/reference/check_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks a set of variables can be coerced to numeric and coerces them — check_numeric","title":"Checks a set of variables can be coerced to numeric and coerces them — check_numeric","text":"N.B. works specific environment (prevent weird side effects)","code":""},{"path":"/reference/check_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks a set of variables can be coerced to numeric and coerces them — check_numeric","text":"","code":"check_numeric(   ...,   .message = \"`{param}` is non-numeric ({err}).\",   .env = rlang::caller_env() )"},{"path":"/reference/check_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks a set of variables can be coerced to numeric and coerces them — check_numeric","text":"... list symbols .message glue spec containing {param} name parameter {err} cause fo error .env environment check (defaults calling environment)","code":""},{"path":"/reference/check_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks a set of variables can be coerced to numeric and coerces them — check_numeric","text":"nothing. called side effects. throws error variables can coerced.","code":""},{"path":"/reference/check_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks a set of variables can be coerced to numeric and coerces them — check_numeric","text":"","code":"a = c(1:4L) b = c(\"1\",NA,\"3.3\") f = NULL g = NA check_numeric(a,b,f,g)  c = c(\"dfsfs\") try(check_numeric(c,d, mean)) #> Warning: 1) 'd' is not defined in this context #> 2) 'mean' is not defined in this context #> Error in .check_framework(..., predicate = predicate, convert = convert,  :  #>   1) `c` is non-numeric (non numeric format)."},{"path":"/reference/col_syms.html","id":null,"dir":"Reference","previous_headings":"","what":"Column names as symbols — col_syms","title":"Column names as symbols — col_syms","text":"Column names symbols","code":""},{"path":"/reference/col_syms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column names as symbols — col_syms","text":"","code":"col_syms(df)"},{"path":"/reference/col_syms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column names as symbols — col_syms","text":"df dataframe","code":""},{"path":"/reference/col_syms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column names as symbols — col_syms","text":"list symbols","code":""},{"path":"/reference/col_syms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column names as symbols — col_syms","text":"","code":"intersect(colsyms(iris), ensyms2(tidyselect::starts_with(\"S\"), .df=iris)) #> Error in colsyms(iris): could not find function \"colsyms\""},{"path":"/reference/doc_formals.html","id":null,"dir":"Reference","previous_headings":"","what":"Document default formal parameters in a function — doc_formals","title":"Document default formal parameters in a function — doc_formals","text":"intended used Roxygen tag document default value allowable values function","code":""},{"path":"/reference/doc_formals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Document default formal parameters in a function — doc_formals","text":"","code":"doc_formals(fn, param, one_of = TRUE)"},{"path":"/reference/doc_formals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Document default formal parameters in a function — doc_formals","text":"fn function current package param parameter (usually param block) one_of decorate string \"default\"/\"one \" depending type","code":""},{"path":"/reference/doc_formals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Document default formal parameters in a function — doc_formals","text":"formatted string inclusion Roxygen block","code":""},{"path":"/reference/doc_formals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Document default formal parameters in a function — doc_formals","text":"","code":"test_fn = function(     arg = c(\"option one\",\"option two\",\"option three\"),     def = 123,     geh = def*2 ) {   arg = match.arg(arg) }  doc_formals(test_fn, arg) #> [1] \"one of: `option one`, `option two`, `option three`; default `option one`\" doc_formals(test_fn, def) #> [1] \"default `123`\" doc_formals(test_fn, geh) #> [1] \"default `def * 2`\""},{"path":"/reference/ensyms2.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a parameter into a list of symbols — ensyms2","title":"Convert a parameter into a list of symbols — ensyms2","text":"Used within function allows list columns given parameter parent function number flexible ways. list unquoted symbols, list quoted strings, tidyselect syntax (assuming parent function dataframe first argument) formula.","code":""},{"path":"/reference/ensyms2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a parameter into a list of symbols — ensyms2","text":"","code":"ensyms2(   x,   .as = c(\"symbol\", \"character\"),   .side = c(\"rhs\", \"lhs\"),   .tidy = FALSE )"},{"path":"/reference/ensyms2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a parameter into a list of symbols — ensyms2","text":"x one list symbols, list strings, tidyselect expression, formula .type output desired:  (symbol character) .side desired side formulae output:  (lhs rhs); relevant x formula (list formulae) .tidy called context \"tidy\" style function. .e. one takes dataframe main parameter? (Default FALSE)","code":""},{"path":"/reference/ensyms2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a parameter into a list of symbols — ensyms2","text":"either list symbols character vector symbols","code":""},{"path":"/reference/ensyms2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a parameter into a list of symbols — ensyms2","text":"","code":"# TODO: convert these to tests eg = function(df, vars, ...) {   vars = ensyms2(vars, ..., .tidy=TRUE)   print(vars) }  eg(iris, c(Sepal.Width, Species, Sepal.Length)) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, c(\"Sepal.Width\", \"Species\", \"Sepal.Length\", \"extra\")) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, \"Sepal.Width\") #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, Sepal.Width) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, dplyr::vars(Sepal.Width)) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, dplyr::vars(Sepal.Width, Species, Sepal.Length)) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, list(Sepal.Width, Species, Sepal.Length)) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, list(\"Sepal.Width\", \"Species\", \"Sepal.Length\")) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, tidyselect::starts_with(\"Sepal\")) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, Species ~ Sepal.Width + Sepal.Length) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, Species ~ Sepal.Width + Sepal.Length, .side = \"lhs\") #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, . ~ Sepal.Width + Sepal.Length, .side = \"lhs\") #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, Sepal.Width + Sepal.Length ~ .) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" eg(iris, c(~ Sepal.Width + Sepal.Length, ~ Petal.Width + Petal.Length)) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\"  try(eg(iris, c(~ .))) #> Error in ensyms2(vars, ..., .tidy = TRUE) :  #>   could not find function \"ensyms2\" eg(iris, list(~ Sepal.Width + Sepal.Length, ~ Petal.Width + Petal.Length)) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\"  # In a way this shouldn't work, but does: eg(iris, c(~ Sepal.Width + Sepal.Length, Petal.Width + Petal.Length)) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\"  # injection support: subs = ensyms2(c(\"Sepal.Width\", \"Species\", \"Sepal.Length\")) #> Error in ensyms2(c(\"Sepal.Width\", \"Species\", \"Sepal.Length\")): could not find function \"ensyms2\" # this must be injected as a single thing as the parameter x but actually it  # turns out to be just the same as supplying a list of symbols as the bare  # parameter eg(iris,!!subs) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" ensyms2(!!subs) #> Error in ensyms2(!!subs): could not find function \"ensyms2\" # same as: eg(iris,subs) #> Error in ensyms2(vars, ..., .tidy = TRUE): could not find function \"ensyms2\" ensyms2(subs) #> Error in ensyms2(subs): could not find function \"ensyms2\"  eg2 = function(vars, ...) {   vars = ensyms2(vars, ..., .tidy=FALSE)   print(vars) } eg2(tidyselect::starts_with(\"Sepal\")) #> Error in ensyms2(vars, ..., .tidy = FALSE): could not find function \"ensyms2\""},{"path":"/reference/escalate.html","id":null,"dir":"Reference","previous_headings":"","what":"Cause warnings to create an error — escalate","title":"Cause warnings to create an error — escalate","text":"opposite suppressWarnings(). immediately error warning thrown expr. useful track source random prevent Rs permissive approach data transformations. also useful identify code intermittent rlang warning issued every 8 hours.","code":""},{"path":"/reference/escalate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cause warnings to create an error — escalate","text":"","code":"escalate(expr)"},{"path":"/reference/escalate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cause warnings to create an error — escalate","text":"expr expression evaluate","code":""},{"path":"/reference/escalate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cause warnings to create an error — escalate","text":"evaluated expression error","code":""},{"path":"/reference/escalate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cause warnings to create an error — escalate","text":"","code":"try(escalate(as.integer(\"ASDAS\"))) #> Error : NAs introduced by coercion  try(escalate(rlang::warn(\"test\", .frequency=\"regularly\", .frequency_id = \"asdasdasasdd\"))) #> Error : test try(escalate(rlang::warn(\"test\", .frequency=\"regularly\", .frequency_id = \"asdasdasasdd\"))) #> Error : test try(escalate(rlang::warn(\"test\", .frequency=\"regularly\", .frequency_id = \"asdasdasasdd\"))) #> Error : test try(escalate(rlang::warn(\"test\", .frequency=\"regularly\", .frequency_id = \"asdasdasasdd\"))) #> Error : test  # options(\"rlib_warning_verbosity\"=NULL) # options(\"rlib_warning_verbosity\"=\"verbose\") # \"lifecycle_verbosity\"=\"warning\""},{"path":"/reference/escalateWarnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Cause warnings to create an error — escalateWarnings","title":"Cause warnings to create an error — escalateWarnings","text":"Cause warnings create error","code":""},{"path":"/reference/escalateWarnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cause warnings to create an error — escalateWarnings","text":"","code":"escalateWarnings(expr)"},{"path":"/reference/escalateWarnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cause warnings to create an error — escalateWarnings","text":"expr expression evaluate","code":""},{"path":"/reference/escalateWarnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cause warnings to create an error — escalateWarnings","text":"evaluated expression error","code":""},{"path":"/reference/escalateWarnings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cause warnings to create an error — escalateWarnings","text":"","code":"try(escalateWarnings(as.integer(\"ASDAS\"))) #> Error : NAs introduced by coercion"},{"path":"/reference/fix_unqualified_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix errors introduced in package creation by forgetting to qualify\nnamespaces. — fix_unqualified_fns","title":"Fix errors introduced in package creation by forgetting to qualify\nnamespaces. — fix_unqualified_fns","text":"code linting function expected called console package development. scan files current project replace unqualified references e.g. mutate ones dplyr::mutate etc.","code":""},{"path":"/reference/fix_unqualified_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix errors introduced in package creation by forgetting to qualify\nnamespaces. — fix_unqualified_fns","text":"","code":"fix_unqualified_fns(   rDirectories = c(here::here(\"R\"), here::here(\"vignettes\"),     here::here(\"tests/testthat\")),   description = here::here(\"DESCRIPTION\"),   dry_run = TRUE )"},{"path":"/reference/fix_unqualified_fns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix errors introduced in package creation by forgetting to qualify\nnamespaces. — fix_unqualified_fns","text":"rDirectories locations R code fix (default R scripts, vignettes, tests) description location description file dry_run default function actually anything unless set FALSE. However dry run output can manually compared diff tool interactively accept changes.","code":""},{"path":"/reference/fix_unqualified_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix errors introduced in package creation by forgetting to qualify\nnamespaces. — fix_unqualified_fns","text":"nothing. called side effects.","code":""},{"path":"/reference/get_fn_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Fully evaluate the arguments from a function call as a named list. — get_fn_args","title":"Fully evaluate the arguments from a function call as a named list. — get_fn_args","text":"Used within function provides access actual arguments provided invocation parent function, plus default values. parameters evaluated eagerly returned (symbols expressions must resolve real values.)","code":""},{"path":"/reference/get_fn_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fully evaluate the arguments from a function call as a named list. — get_fn_args","text":"","code":"get_fn_args(env = rlang::caller_env(), missing = TRUE)"},{"path":"/reference/get_fn_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fully evaluate the arguments from a function call as a named list. — get_fn_args","text":"env environment check (default rlang::caller_env()) missing include missing parameters list (default TRUE)?","code":""},{"path":"/reference/get_fn_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fully evaluate the arguments from a function call as a named list. — get_fn_args","text":"named list arguments enclosing function","code":""},{"path":"/reference/get_fn_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fully evaluate the arguments from a function call as a named list. — get_fn_args","text":"","code":"ftest = function(a,b,c=\"default\",...) {   tmp = get_fn_args()   tmp }  ftest(a=1, b=2) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] \"default\" #>   # missing param `b` - empty values are returned just as a name in the environment # with no value but which can be checked for as if in the environment. tmp = ftest(a=1) class(tmp$b) #> [1] \"name\" rlang::is_missing(tmp$b) #> [1] TRUE b = 1 rlang::is_missing(tmp$b) #> [1] TRUE  # extra param `d` and default parameter `c` ftest(a=1, b=2, d=\"another\") #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] \"default\" #>  #> $d #> [1] \"another\" #>   # does not work try(ftest(a=1, b=2, d=another)) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] \"default\" #>  # does work tmp = ftest( a=1, d= as.symbol(\"another\") ) # also does work another =5 ftest( a=1, d= another) #> $a #> [1] 1 #>  #> $b #>  #>  #> $c #> [1] \"default\" #>  #> $d #> [1] 5 #>   # Filter out missing values  ftest2 = function(a,b,c=\"default\",...) {   tmp = get_fn_args(missing=FALSE)   tmp }  ftest2(a=1) #> $a #> [1] 1 #>  #> $c #> [1] \"default\" #>"},{"path":"/reference/get_fn_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of a function — get_fn_name","title":"Get the name of a function — get_fn_name","text":"Functions may named anonymous. functions used parameter, error reporting sometimes useful able refer function name given defined. Sometimes functions can multiple names.","code":""},{"path":"/reference/get_fn_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of a function — get_fn_name","text":"","code":"get_fn_name(fn = rlang::caller_fn(), fmt = \"%s\", collapse = \"/\")"},{"path":"/reference/get_fn_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of a function — get_fn_name","text":"fn function definition (defaults function get_fn_name called) fmt passed sprintf function name e.g. %s() append brackets collapse passed paste0 case multiple matching functions. set NULL want multiple function names vector.","code":""},{"path":"/reference/get_fn_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of a function — get_fn_name","text":"name function \"<unknown>\" known","code":""},{"path":"/reference/get_fn_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of a function — get_fn_name","text":"","code":"# detecting the name when function used as a parameter. This is the  # primary use case for `get_fn_name` testfn2 = function(fn) {   message(\"called with function: \",get_fn_name(fn)) }  testfn2(mean) #> called with function: mean testfn2(utils::head) #> called with function: utils::head testfn2(testfn2) #> called with function: testfn2  # detecting the name of a calling function, an unusual use case as this is # normally known to the user. testfn = function() {   message(get_fn_name(fmt=\"%s(...)\"),\" is a function\") }  `test fn 2` = testfn test_fn_3 = testfn testfn() #> test_fn_3(...)/`test fn 2`(...)/testfn(...) is a function"},{"path":"/reference/optional_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an optional function without triggering a CRAN warning — optional_fn","title":"Get an optional function without triggering a CRAN warning — optional_fn","text":"want use function installed want installed part package want reference part Imports Suggests fields package DESCRIPTION.","code":""},{"path":"/reference/optional_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an optional function without triggering a CRAN warning — optional_fn","text":"","code":"optional_fn(   pkg,   name,   alt = function(...) {      stop(\"function `\", pkg, \"::\", name, \"(...)` not available\")      } )"},{"path":"/reference/optional_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an optional function without triggering a CRAN warning — optional_fn","text":"pkg package name (function name \"pkg::fn\") name function wish use (specified pkg) alt alternative function can used requested one available. default throws error package available, fallback can used instead.","code":""},{"path":"/reference/optional_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an optional function without triggering a CRAN warning — optional_fn","text":"function want available alternative","code":""},{"path":"/reference/optional_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an optional function without triggering a CRAN warning — optional_fn","text":"","code":"# use openSSL if installed: fn = optional_fn(\"openssl\", \"md5\", alt = digest::digest) as.character(fn(as.raw(c(1,2,3)))) #> [1] \"5289df737df57326fcdd22597afb1fac\"  fn2 = optional_fn(\"asdasdadsda::asdasdasd\") #> Error in optional_fn(\"asdasdadsda::asdasdasd\"): argument \"name\" is missing, with no default try({   # block to execute if asdasdadsda::asdasdasd() is available   fn2() })  #> Error in fn2() : could not find function \"fn2\" # add silent=TRUE to hide error message  # this function does not exists and so the alternative is used instead. fn3 = optional_fn(\"asdasdadsda::asdasdasd\", ~ message(\"formula alternative\")) fn3() #> formula alternative"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/recycle.html","id":null,"dir":"Reference","previous_headings":"","what":"Strictly recycle function parameters — recycle","title":"Strictly recycle function parameters — recycle","text":"recycle called within function ensures parameters calling function length repeating using rep. function alters environment called. stricter R recycling repeat vectors length one match longer ones, throws informative errors.","code":""},{"path":"/reference/recycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strictly recycle function parameters — recycle","text":"","code":"recycle(..., .min = 1, .env = rlang::caller_env())"},{"path":"/reference/recycle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strictly recycle function parameters — recycle","text":"... variables recycle .min minimum length results (defaults 1) .env environment recycle within.","code":""},{"path":"/reference/recycle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strictly recycle function parameters — recycle","text":"length longest variable","code":""},{"path":"/reference/recycle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Strictly recycle function parameters — recycle","text":"NULL values recycled, missing values ignored.","code":""},{"path":"/reference/recycle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strictly recycle function parameters — recycle","text":"","code":"testfn = function(a, b, c) {   n = recycle(a,b,c)   print(a)   print(b)   print(c)   print(n) }  testfn(a=c(1,2,3), b=\"needs recycling\", c=NULL) #> [1] 1 2 3 #> [1] \"needs recycling\" \"needs recycling\" \"needs recycling\" #> NULL #> [1] 3 try(testfn(a=c(1,2,3), c=NULL)) #> [1] 1 2 3 #> Error in testfn(a = c(1, 2, 3), c = NULL) :  #>   argument \"b\" is missing, with no default  testfn(a=character(), b=integer(), c=NULL) #> character(0) #> integer(0) #> NULL #> [1] 0  # inconsistent to have a zero length and a non zero length try(testfn(a=c(\"a\",\"b\"), b=integer(), c=NULL)) #> Error : Parameter `b` is/are the wrong lengths. They should be length 2 (or 1)"},{"path":"/reference/resolve_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve missing values in function parameters and check consistency — resolve_missing","title":"Resolve missing values in function parameters and check consistency — resolve_missing","text":"Uses relationships parameters iteratively fill missing values. possible specify inconsistent set rules data case resulting values picked error thrown.","code":""},{"path":"/reference/resolve_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve missing values in function parameters and check consistency — resolve_missing","text":"","code":"resolve_missing(   ...,   .env = rlang::caller_env(),   .eval_null = TRUE,   .error =     \"unable to infer missing variable(s): {.missing} using:\\n{.constraints}\\ngiven known variable(s): {.present} in {.call}\" )"},{"path":"/reference/resolve_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve missing values in function parameters and check consistency — resolve_missing","text":"... either set relationships list x=y+z expressions .env environment check (optional - defaults caller_env()) .eval_null resolution defined missing variables specified can also fill values explicitly given NULL default NULL TRUE. default. .error glue spec defining error message. can use parameters .missing, .constraints, .present .call construct error message.","code":""},{"path":"/reference/resolve_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve missing values in function parameters and check consistency — resolve_missing","text":"nothing. Alters .env environment fill missing values throws informative error","code":""},{"path":"/reference/resolve_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve missing values in function parameters and check consistency — resolve_missing","text":"","code":"# missing variables left with default value of NULL in function definition testfn = function(pos, neg, n) {   resolve_missing(pos=n-neg, neg=n-pos, n=pos+neg)   return(tibble::tibble(pos=pos,neg=neg,n=n)) }  testfn(pos=1:4, neg = 4:1) #> # A tibble: 4 × 3 #>     pos   neg     n #>   <int> <int> <int> #> 1     1     4     5 #> 2     2     3     5 #> 3     3     2     5 #> 4     4     1     5 testfn(neg=1:4, n = 10:7) #> # A tibble: 4 × 3 #>     pos   neg     n #>   <int> <int> <int> #> 1     9     1    10 #> 2     7     2     9 #> 3     5     3     8 #> 4     3     4     7  try(testfn()) #> Error : unable to infer missing variables: no non-null parameters provided  # not enough info to infer the missing variables try(testfn(neg=1:4)) #> Error : unable to infer missing variable(s): `pos`, `n` using: #> `pos = n - neg` #> `neg = n - pos` #> `n = pos + neg` #> given known variable(s): `neg` in `testfn(neg = 1:4)`  # the parameters given are inconsistent with the relationships defined. try(testfn(pos=2, neg=1, n=4)) #> Error : 1) constraint 'pos = n - neg' is not met. #> 2) constraint 'neg = n - pos' is not met. #> 3) constraint 'n = pos + neg' is not met."},{"path":"/reference/var_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a definition of column groups from function parameters — var_group","title":"Extract a definition of column groups from function parameters — var_group","text":"supporting utility functions signature function(df, ...) operate different groups columns, need user supply column groups simple way. 2 3 levels column grouping can specified easily style function, generally referred z (.e. group, cohort), y (.e. subgroup, response) x (.e. data). configurations, z x available.","code":""},{"path":"/reference/var_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a definition of column groups from function parameters — var_group","text":"","code":"var_group(df, ..., .infer_y = FALSE)"},{"path":"/reference/var_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a definition of column groups from function parameters — var_group","text":"df data frame may grouped ... specification groupings may one : formula list formulae (e.g. y1 + y2 ~ x1 + x2, z:df grouping). . can used specify rest columns, e.g. y1 + y2 ~ . list symbols (x1, x2, ..., z:df grouping, y:empty) list quosures (e.g. dplyr::vars(x1,x2)) (x, z:df grouping, y:empty) One tidyselect specification (x, z:df grouping, y:empty) Two tidyselect specifications (x, y, z:df grouping) Three tidyselect specifications (x, y, z, N.B. df must ungrouped work) Column names strings (x, z:df grouping, y:empty) .infer_y z x defined make y rest dataframe columns","code":""},{"path":"/reference/var_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a definition of column groups from function parameters — var_group","text":"var_grp_df defined z, y x column groups, use within var_group_* framework.","code":""},{"path":"/reference/var_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a definition of column groups from function parameters — var_group","text":"","code":"tmp = iris %>% dplyr::group_by(Species) %>% var_group(. ~ Petal.Width + Sepal.Width)  tmp = iris %>% dplyr::group_by(Species) %>%    var_group(tidyselect::starts_with(\"Sepal\"),tidyselect::starts_with(\"Petal\"))"},{"path":"/reference/var_group_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross compare subgroups of data to each other — var_group_compare","title":"Cross compare subgroups of data to each other — var_group_compare","text":"function helps construct group wise cross-correlation matrices column comparisons dataframe. assume data major grouping data columns wish compare . specify columns compare formula tidyselect using var_grp_df using use set columns compare.","code":""},{"path":"/reference/var_group_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross compare subgroups of data to each other — var_group_compare","text":"","code":"var_group_compare(var_grp_df, ..., .diagonal = FALSE)"},{"path":"/reference/var_group_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross compare subgroups of data to each other — var_group_compare","text":"var_grp_df data frame major data groupings ... set named functions. functions must take 2 vectors type columns compared generate single result (may complex S3 object lm). functions might example chisq.test factor columns cor numeric columns. .diagonal column compared ? usually FALSE","code":""},{"path":"/reference/var_group_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross compare subgroups of data to each other — var_group_compare","text":"dataframe containing major z groupings unique binary combinations y x columnsas y x columns. named comparisons provided ... form columns. primitive types list column.","code":""},{"path":"/reference/var_group_compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross compare subgroups of data to each other — var_group_compare","text":"Although examples functional generally expect wrapped within function within package comparisons pre-defined, var_group framework hidden user.","code":""},{"path":"/reference/var_group_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross compare subgroups of data to each other — var_group_compare","text":"","code":"iris %>% group_by(Species) %>% var_group(~ .) %>%   var_group_compare(     correlation = cor   ) #> Error in group_by(., Species): could not find function \"group_by\"    diamonds %>% var_group(tidyselect::where(is.factor)) %>%    var_group_compare(     chi.p.value = ~ stats::chisq.test(.x,.y)$p.value   ) #> Error in eval(expr, envir, enclos): object 'diamonds' not found"},{"path":"/reference/var_group_count.html","id":null,"dir":"Reference","previous_headings":"","what":"The number of major groups (z categories) in a var_grp_df — var_group_count","title":"The number of major groups (z categories) in a var_grp_df — var_group_count","text":"number major groups (z categories) var_grp_df","code":""},{"path":"/reference/var_group_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The number of major groups (z categories) in a var_grp_df — var_group_count","text":"","code":"var_group_count(var_grp_df)"},{"path":"/reference/var_group_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The number of major groups (z categories) in a var_grp_df — var_group_count","text":"var_grp_df var_grp dataframe","code":""},{"path":"/reference/var_group_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The number of major groups (z categories) in a var_grp_df — var_group_count","text":"count groups","code":""},{"path":"/reference/var_group_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The number of major groups (z categories) in a var_grp_df — var_group_count","text":"","code":"tmp = iris %>% dplyr::group_by(Species) %>% var_group(. ~ Petal.Width + Sepal.Width) tmp %>% var_group_count() #> [1] 3"},{"path":"/reference/var_group_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Export var_group metadata as a formula — var_group_formula","title":"Export var_group metadata as a formula — var_group_formula","text":"Produces y x terms var_grp_df formula potentially using model another var_group","code":""},{"path":"/reference/var_group_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export var_group metadata as a formula — var_group_formula","text":"","code":"var_group_formula(var_grp_df)"},{"path":"/reference/var_group_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export var_group metadata as a formula — var_group_formula","text":"var_grp_df var_group dataframe","code":""},{"path":"/reference/var_group_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export var_group metadata as a formula — var_group_formula","text":"formula like y1 + y2 ~ x1 + x2 + ...","code":""},{"path":"/reference/var_group_modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to each z group using group_modify() — var_group_modify","title":"Apply a function to each z group using group_modify() — var_group_modify","text":"Apply function z group using group_modify()","code":""},{"path":"/reference/var_group_modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to each z group using group_modify() — var_group_modify","text":"","code":"var_group_modify(var_grp_df, .f, ..., .subgroup = TRUE, .progress = FALSE)"},{"path":"/reference/var_group_modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to each z group using group_modify() — var_group_modify","text":"var_grp_df var_grp dataframe .f function signature function(x,y,z,...) default .subgroup=TRUE form function(xy,z,...) .subgroup=FALSE. .subgroup=TRUE function called group subgroup parameters x data dataframe usually multiple rows, y z single row dataframes contianing current subgroup group respectively. subgroup=FALSE major grouping z used ... Arguments passed dplyr::group_modify .data grouped tibble .keep grouping variables kept .x .subgroup grouped data frames also subgroup y columns .progress shoudl progress reported progress bar.","code":""},{"path":"/reference/var_group_modify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to each z group using group_modify() — var_group_modify","text":"transformed data plain dataframe","code":""},{"path":"/reference/var_group_modify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to each z group using group_modify() — var_group_modify","text":"","code":"tmp = iris %>% dplyr::group_by(Species) %>% var_group(. ~ Petal.Width + Petal.Length)  tmp2 = tmp %>% var_group_modify(   ~ {     Sys.sleep(0.02)     return(.x %>% count())   },   .progress=TRUE ) #> Error in count(.): could not find function \"count\"  tmp3 = tmp %>% var_group_modify(~ .x %>% dplyr::count(), .subgroup=FALSE)  # .f with 2 parameters: tmp %>% var_group_modify(   ~ {     return(tibble::tibble(       Sepal.Area = .y$Sepal.Length*.y$Sepal.Width,       Max.Petal.Area = max(.x$Petal.Length*.x$Petal.Width),       n = nrow(.x)     ))   } ) %>% dplyr::filter(n>1) #> 3 group(s): Species. #> (subgroup) Sepal.Length + Sepal.Width ~ Sepal.Area + Max.Petal.Area + n (data) #> # A tibble: 21 × 6 #>    Species Sepal.Length Sepal.Width Sepal.Area Max.Petal.Area     n #>    <fct>          <dbl>       <dbl>      <dbl>          <dbl> <int> #>  1 setosa           4.7         3.2       15.0           0.32     2 #>  2 setosa           4.8         3         14.4           0.42     2 #>  3 setosa           4.8         3.4       16.3           0.38     2 #>  4 setosa           4.9         3.1       15.2           0.3      2 #>  5 setosa           5           3.4       17             0.64     2 #>  6 setosa           5           3.5       17.5           0.96     2 #>  7 setosa           5.1         3.5       17.8           0.42     2 #>  8 setosa           5.1         3.8       19.4           0.76     3 #>  9 setosa           5.4         3.4       18.4           0.6      2 #> 10 setosa           5.4         3.9       21.1           0.68     2 #> # ℹ 11 more rows"},{"path":"/reference/var_group_nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest a var_grp_df by the z columns — var_group_nest","title":"Nest a var_grp_df by the z columns — var_group_nest","text":"Nest var_grp_df z columns","code":""},{"path":"/reference/var_group_nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest a var_grp_df by the z columns — var_group_nest","text":"","code":"var_group_nest(var_grp_df, .subgroup = FALSE, .key = \"data\")"},{"path":"/reference/var_group_nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest a var_grp_df by the z columns — var_group_nest","text":"var_grp_df var_grp dataframe .subgroup nested data frames also group y columns .key name resulting nested column. applicable ... specified, .e. case df %>% nest(.= x). NULL, \"data\" used default.","code":""},{"path":"/reference/var_group_nest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nest a var_grp_df by the z columns — var_group_nest","text":"aa nested dataframe z  columns .key column y x columns nested . nested data grouped y columns.","code":""},{"path":"/reference/var_group_nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest a var_grp_df by the z columns — var_group_nest","text":"","code":"tmp = iris %>% dplyr::group_by(Species) %>% var_group(. ~ Petal.Width + Sepal.Width) tmp2 = tmp %>% var_group_nest() #> Warning: Supplying `...` without names was deprecated in tidyr 1.0.0. #> ℹ Please specify a name for each selection. #> ℹ Did you want `data = .key`? #> ℹ The deprecated feature was likely used in the pkgutils package. #>   Please report the issue at #>   <https://github.com/bristol-vaccine-centre/pkgutils/issues>. #> Error in nest(.data, !!!cols, .by = {    {        .by    }}): In expression named `data`: #> Caused by error: #> ! Can't subset columns that don't exist. #> ✖ Column `data` doesn't exist."},{"path":"/reference/var_grp_s3.html","id":null,"dir":"Reference","previous_headings":"","what":"var_grp_df S3 Methods — var_grp_s3","title":"var_grp_df S3 Methods — var_grp_s3","text":"var_grp_df S3 Methods","code":""},{"path":"/reference/var_grp_s3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"var_grp_df S3 Methods — var_grp_s3","text":"","code":"glimpse.var_grp_df(x, ...)  # S3 method for var_grp_df format(x, ...)  # S3 method for var_grp_df print(x, ...)  is.var_grp_df(x, ...)"},{"path":"/reference/var_grp_s3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"var_grp_df S3 Methods — var_grp_s3","text":"x var_grp_df dataframe ... passed generic functions","code":""},{"path":"/reference/var_grp_s3.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"var_grp_df S3 Methods — var_grp_s3","text":"glimpse.var_grp_df(): glimpse format(var_grp_df): format print(var_grp_df): print .var_grp_df(): ","code":""},{"path":"/reference/var_grps.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract grouping info frm a var_grp_df — var_grps","title":"Extract grouping info frm a var_grp_df — var_grps","text":"Extract grouping info frm var_grp_df","code":""},{"path":"/reference/var_grps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract grouping info frm a var_grp_df — var_grps","text":"","code":"var_grps(var_grp_df)"},{"path":"/reference/var_grps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract grouping info frm a var_grp_df — var_grps","text":"var_grp_df dataframe","code":""},{"path":"/reference/var_grps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract grouping info frm a var_grp_df — var_grps","text":"list lists containing x,y, z column sets symbol lists","code":""},{"path":"/reference/var_has_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Does this var_grp_df have more than one major group? — var_has_groups","title":"Does this var_grp_df have more than one major group? — var_has_groups","text":"var_grp_df one major group?","code":""},{"path":"/reference/var_has_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does this var_grp_df have more than one major group? — var_has_groups","text":"","code":"var_has_groups(var_grp_df)"},{"path":"/reference/var_has_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does this var_grp_df have more than one major group? — var_has_groups","text":"var_grp_df var_group dataframe","code":""},{"path":"/reference/var_has_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does this var_grp_df have more than one major group? — var_has_groups","text":"boolean","code":""},{"path":"/reference/var_subgroup_count.html","id":null,"dir":"Reference","previous_headings":"","what":"The number of major and sub groups (z and y categories) in a var_grp_df — var_subgroup_count","title":"The number of major and sub groups (z and y categories) in a var_grp_df — var_subgroup_count","text":"number major sub groups (z y categories) var_grp_df","code":""},{"path":"/reference/var_subgroup_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The number of major and sub groups (z and y categories) in a var_grp_df — var_subgroup_count","text":"","code":"var_subgroup_count(var_grp_df, .stratified = FALSE)"},{"path":"/reference/var_subgroup_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The number of major and sub groups (z and y categories) in a var_grp_df — var_subgroup_count","text":"var_grp_df var_grp dataframe .stratified TRUE return subgroup count stratified major groups dataframe","code":""},{"path":"/reference/var_subgroup_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The number of major and sub groups (z and y categories) in a var_grp_df — var_subgroup_count","text":"count groups subgroups","code":""},{"path":"/reference/var_subgroup_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The number of major and sub groups (z and y categories) in a var_grp_df — var_subgroup_count","text":"","code":"tmp = iris %>% dplyr::group_by(Species) %>% var_group(. ~ Petal.Width + Sepal.Width) tmp %>% var_subgroup_count() #> [1] 124"},{"path":"/reference/var_subgroup_nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest a var_grp_df by the z and y columns — var_subgroup_nest","title":"Nest a var_grp_df by the z and y columns — var_subgroup_nest","text":"Nest var_grp_df z y columns","code":""},{"path":"/reference/var_subgroup_nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest a var_grp_df by the z and y columns — var_subgroup_nest","text":"","code":"var_subgroup_nest(var_grp_df, .key = \"data\")"},{"path":"/reference/var_subgroup_nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest a var_grp_df by the z and y columns — var_subgroup_nest","text":"var_grp_df var_grp dataframe .key name resulting nested column. applicable ... specified, .e. case df %>% nest(.= x). NULL, \"data\" used default.","code":""},{"path":"/reference/var_subgroup_nest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nest a var_grp_df by the z and y columns — var_subgroup_nest","text":"nested dataframe z y columns .key column x columns nested ","code":""},{"path":"/reference/var_subgroup_nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest a var_grp_df by the z and y columns — var_subgroup_nest","text":"","code":"tmp = iris %>% dplyr::group_by(Species) %>% var_group(. ~ Petal.Width + Sepal.Width) tmp2 = tmp %>% var_group_nest() #> Error in nest(.data, !!!cols, .by = {    {        .by    }}): In expression named `data`: #> Caused by error: #> ! Can't subset columns that don't exist. #> ✖ Column `data` doesn't exist."}]
