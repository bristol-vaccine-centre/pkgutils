% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ensyms2.R
\name{ensyms2}
\alias{ensyms2}
\title{Convert a parameter into a list of symbols}
\usage{
ensyms2(
  x,
  .as = c("symbol", "character"),
  .side = c("rhs", "lhs"),
  .tidy = FALSE
)
}
\arguments{
\item{x}{one of a list of symbols, a list of strings, a \code{tidyselect}
expression, or a formula}

\item{.as}{the type of output desired:  (\code{symbol} or \code{character})}

\item{.side}{the desired side of formulae output:  (\code{lhs} or \code{rhs}); this is
only relevant if \code{x} is a formula (or list of formulae)}

\item{.tidy}{is this being called in the context of a "tidy" style function. I.e.
one that takes a dataframe as the main parameter? (Default is \code{FALSE})}
}
\value{
either a list of symbols or a character vector of the symbols
}
\description{
Used within a function this allows for a list of columns to be given as a
parameter to the parent function in a number of flexible ways. A list of
unquoted symbols, a list of quoted strings, a tidyselect syntax (assuming the
parent function has a dataframe is its first argument) or as a formula.
}
\examples{

# TODO: convert these to tests
eg = function(df, vars, ...) {
  vars = ensyms2(vars, ..., .tidy=TRUE)
  print(vars)
}

eg(iris, c(Sepal.Width, Species, Sepal.Length))
eg(iris, c("Sepal.Width", "Species", "Sepal.Length", "extra"))
eg(iris, "Sepal.Width")
eg(iris, Sepal.Width)
eg(iris, dplyr::vars(Sepal.Width))
eg(iris, dplyr::vars(Sepal.Width, Species, Sepal.Length))
eg(iris, list(Sepal.Width, Species, Sepal.Length))
eg(iris, list("Sepal.Width", "Species", "Sepal.Length"))
eg(iris, tidyselect::starts_with("Sepal"))
eg(iris, Species ~ Sepal.Width + Sepal.Length)
eg(iris, Species ~ Sepal.Width + Sepal.Length, .side = "lhs")
eg(iris, . ~ Sepal.Width + Sepal.Length, .side = "lhs")
eg(iris, Sepal.Width + Sepal.Length ~ .)
eg(iris, c(~ Sepal.Width + Sepal.Length, ~ Petal.Width + Petal.Length))

try(eg(iris, c(~ .)))
eg(iris, list(~ Sepal.Width + Sepal.Length, ~ Petal.Width + Petal.Length))

# In a way this shouldn't work, but does:
eg(iris, c(~ Sepal.Width + Sepal.Length, Petal.Width + Petal.Length))

# injection support:
subs = ensyms2(c("Sepal.Width", "Species", "Sepal.Length"))

# this must be injected as a single thing as the parameter x but actually it 
# turns out to be just the same as supplying a list of symbols as the bare 
# parameter
# eg(iris,!!subs)
# ensyms2(!!subs)
# same as:
# eg(iris,subs)
# ensyms2(subs)

}
\concept{var_group}
