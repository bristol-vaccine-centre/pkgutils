% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/var_group_modify.R
\name{var_group_modify}
\alias{var_group_modify}
\title{Apply a function to each \code{z} group using \code{group_modify()}}
\usage{
var_group_modify(var_grp_df, .f, ..., .subgroup = TRUE, .progress = FALSE)
}
\arguments{
\item{var_grp_df}{the var_grp dataframe}

\item{.f}{a function with the signature \verb{function(x,y,z,...)} if the default \code{.subgroup=TRUE}
or of the form \verb{function(xy,z,...)} if \code{.subgroup=FALSE}. If \code{.subgroup=TRUE}
The function will be called once for each group and subgroup with the parameters
\code{x} being the data as a dataframe with usually multiple rows, and \code{y} and \code{z}
being single row dataframes contianing the current subgroup and group respectively.
Is \code{subgroup=FALSE} then only the major grouping \code{z} is used and}

\item{...}{
  Arguments passed on to \code{\link[dplyr:group_map]{dplyr::group_modify}}
  \describe{
    \item{\code{.data}}{A grouped tibble}
    \item{\code{.keep}}{are the grouping variables kept in \code{.x}}
  }}

\item{.subgroup}{in the grouped data frames also subgroup by the \code{y} columns}

\item{.progress}{shoudl progress be reported with a progress bar.}
}
\value{
the transformed data as a plain dataframe
}
\description{
Apply a function to each \code{z} group using \code{group_modify()}
}
\examples{
tmp = iris \%>\% dplyr::group_by(Species) \%>\% var_group(. ~ Petal.Width + Petal.Length)

tmp2 = tmp \%>\% var_group_modify(
  ~ {
    Sys.sleep(0.02)
    return(.x \%>\% count())
  },
  .progress=TRUE
)

tmp3 = tmp \%>\% var_group_modify(~ .x \%>\% dplyr::count(), .subgroup=FALSE)

# .f with 2 parameters:
tmp \%>\% var_group_modify(
  ~ {
    return(tibble::tibble(
      Sepal.Area = .y$Sepal.Length*.y$Sepal.Width,
      Max.Petal.Area = max(.x$Petal.Length*.x$Petal.Width),
      n = nrow(.x)
    ))
  }
) \%>\% dplyr::filter(n>1)
}
\concept{var_group}
